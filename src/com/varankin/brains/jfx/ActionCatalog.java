package com.varankin.brains.jfx;

import com.varankin.brains.artificial.async.Процесс;
import com.varankin.biz.action.*;
import com.varankin.brains.Контекст;
import com.varankin.brains.appl.Импортировать;
import com.varankin.brains.appl.УправлениеПроцессом;
import java.util.EnumMap;
import java.util.Map;

/**
 *
 * @author &copy; 2023 Николай Варанкин
 */
public final class ActionCatalog 
{
    private final static ActionCatalog КАТАЛОГ = new ActionCatalog();
    
    public static ActionCatalog getInstance()
    {
        return КАТАЛОГ;
    }
    
    public enum Индекс
    {
        Загрузить, Очистить,
        Старт, Стоп, Пауза,
        ИмпортироватьXML,
        ОткрытьАрхив
    }
    
    private final Map<Индекс,СогласованноеДействие<?>> каталог;
    
    private ActionCatalog()
    {
        каталог = new EnumMap<>( Индекс.class );
    }
    
    public СогласованноеДействие<Контекст> действие( Индекс индекс )
    {
        СогласованноеДействие найдено = каталог.get( индекс );
        return найдено != null ? найдено : new СогласованноеДействие( 
                new НереализованноеДействие( индекс ), КоординаторДействий.getInstance() );
    }
    
    public void заполнить( Контекст контекст )
    {
        КоординаторДействий координатор = КоординаторДействий.getInstance();

        
//        НаборФабрик набор = new НаборМаркированныхФабрик( 
//                new НаборБазовыхФабрик( контекст ), контекст.мыслитель.сервис() );
//        СогласованноеДействие<Контекст> действиеЗагрузить = new СогласованноеДействие<>( 
//                new Загрузить(  
//                    набор.фабрикаПоля(), набор.фабрикаСенсора(), 
//                    набор.фабрикаПроцессора(), набор.фабрикаФункции(), 
//                    набор.фабрикаЗначимого() ), координатор );
//        действиеЗагрузить.setEnabled( true );
//        каталог.put( Индекс.Загрузить, действиеЗагрузить );
//        СогласованноеДействие<Контекст> действиеОчистить = new СогласованноеДействие<>( 
//                new Очистить(), координатор );
//        действиеОчистить.setEnabled( false );
//        каталог.put( Индекс.Очистить, действиеОчистить );
//        координатор.блокировать( действиеОчистить, действиеОчистить, действиеЗагрузить );
//        координатор.блокировать( действиеЗагрузить, действиеЗагрузить, действиеОчистить );

        
        СогласованноеДействие<?> действиеСтарт = new СогласованноеДействие<>(
                new УстановитьСостояние( Процесс.Состояние.РАБОТА ), координатор );
        действиеСтарт.setEnabled( true );
        каталог.put( Индекс.Старт, действиеСтарт );
        СогласованноеДействие<?> действиеПауза = new СогласованноеДействие<>(
                new УстановитьСостояние( Процесс.Состояние.ПАУЗА ), координатор );
        действиеПауза.setEnabled( false );
        каталог.put( Индекс.Пауза, действиеПауза );
        СогласованноеДействие<?> действиеСтоп = new СогласованноеДействие<>(
                new УстановитьСостояние( Процесс.Состояние.ОСТАНОВ ), координатор );
        действиеСтоп.setEnabled( false );
        каталог.put( Индекс.Стоп, действиеСтоп );
        координатор.предварять( действиеСтарт, false, действиеСтарт );
        координатор.предварять( действиеСтарт, true, действиеПауза, действиеСтоп );
        координатор.предварять( действиеПауза, false, действиеПауза );
        координатор.предварять( действиеПауза, true, действиеСтарт, действиеСтоп );
        координатор.предварять( действиеСтоп, false, действиеСтоп, действиеПауза );
        координатор.предварять( действиеСтоп, true, действиеСтарт );
        
        
        СогласованноеДействие<?> действиеИмпортировать = new СогласованноеДействие<>(
                new Импортировать(), координатор );
        действиеИмпортировать.setEnabled( true );
        каталог.put( Индекс.ИмпортироватьXML, (СогласованноеДействие<Контекст>)действиеИмпортировать ); //TODO cast!!!!!
        координатор.блокировать( действиеИмпортировать,  действиеИмпортировать );
        
    }
    
    private static class НереализованноеДействие implements Действие<Контекст>
    {
        final Индекс индекс;

        НереализованноеДействие( Индекс индекс ) 
        {
            this.индекс = индекс;
        }
        
        @Override
        public Результат выполнить( Контекст контекст ) 
        {
            throw new UnsupportedOperationException( индекс.name() );
        }
    }
    
    private static class УстановитьСостояние implements Действие<Контекст>
    {
        private final Процесс.Состояние состояние;

        public УстановитьСостояние( Процесс.Состояние состояние )
        {
            this.состояние = состояние;
        }

        @Override
        public Результат выполнить( Контекст контекст )
        {
            ПростойРезультат результат = new ПростойРезультат( this );
            результат.начато();

            Результат результат_шага = new УправлениеПроцессом( состояние ).выполнить( контекст.мыслитель.процесс() );
            результат.добавить( результат_шага );
            if( !Результат.НОРМА.equals( результат_шага.код() ) )
            {
                результат.завершено( результат_шага.код() );
                return результат;
            }
            результат.завершено();
            return результат;
        }

    }
    
}
